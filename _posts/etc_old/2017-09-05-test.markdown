---
layout: post
title: 'Gems! (v6.5)'
tags: [xxx]
---
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="1.-&#48152;&#48373;&#54805;&#44284;-&#48152;&#48373;&#51088;-&#52376;&#47532;-&#54869;&#51064;">1. &#48152;&#48373;&#54805;&#44284; &#48152;&#48373;&#51088; &#52376;&#47532; &#54869;&#51064;<a class="anchor-link" href="#1.-&#48152;&#48373;&#54805;&#44284;-&#48152;&#48373;&#51088;-&#52376;&#47532;-&#54869;&#51064;">&#182;</a></h1>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="iterable&#44284;-iterator-protocol">iterable&#44284; iterator protocol<a class="anchor-link" href="#iterable&#44284;-iterator-protocol">&#182;</a></h3>
<pre><code>실제 사용자 구현시 아래의 스페셜 메소드를 오버라이딩하면 iterable/iterator 타입으로 처리가 가능

iterable : __iter__

iterator : __iter__, __next__</code></pre>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="iterable&#44284;-iterator-&#52628;&#49345;&#54868;-&#53364;&#47000;&#49828;">iterable&#44284; iterator &#52628;&#49345;&#54868; &#53364;&#47000;&#49828;<a class="anchor-link" href="#iterable&#44284;-iterator-&#52628;&#49345;&#54868;-&#53364;&#47000;&#49828;">&#182;</a></h2>
<pre><code>이 추상화 클래스를 상속받아 iterable/iterator 타입에 해당하는 메소드를 오버라이딩 구현하면 됨

iterable : __iter__

iterator : __iter__, __next__</code></pre>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[45]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1">## 타입을 체크하는 추상화 클래스</span>

<span class="kn">import</span> <span class="nn">collections.abc</span> <span class="k">as</span> <span class="nn">cols</span> 

<span class="n">a</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="nb">dir</span><span class="p">(</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterable</span><span class="p">))</span>
<span class="n">b</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="nb">dir</span><span class="p">(</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterator</span><span class="p">))</span> 
<span class="nb">print</span><span class="p">(</span><span class="n">b</span><span class="o">-</span><span class="n">a</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>{&#39;__next__&#39;}
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="&#45236;&#51109;-&#45936;&#51060;&#53552;-&#53440;&#51077;-&#54869;&#51064;">&#45236;&#51109; &#45936;&#51060;&#53552; &#53440;&#51077; &#54869;&#51064;<a class="anchor-link" href="#&#45236;&#51109;-&#45936;&#51060;&#53552;-&#53440;&#51077;-&#54869;&#51064;">&#182;</a></h3>
<pre><code>내장 데이터 타입은 iterable이지만 iterator는 아님 </code></pre>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[25]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">collections.abc</span> <span class="k">as</span> <span class="nn">cols</span> 

<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterable</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterator</span><span class="p">))</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">list</span><span class="p">,</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterable</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">list</span><span class="p">,</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterator</span><span class="p">))</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">tuple</span><span class="p">,</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterable</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">tuple</span><span class="p">,</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterator</span><span class="p">))</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">dict</span><span class="p">,</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterable</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">dict</span><span class="p">,</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterator</span><span class="p">))</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">bytes</span><span class="p">,</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterable</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">bytes</span><span class="p">,</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterator</span><span class="p">))</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">bytearray</span><span class="p">,</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterable</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">bytearray</span><span class="p">,</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterator</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>True
False
True
False
True
False
True
False
True
False
True
False
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="&#54028;&#51060;&#50028;-for-&#47928;&#51060;-iterable-&#52376;&#47532;">&#54028;&#51060;&#50028; for &#47928;&#51060; iterable &#52376;&#47532;<a class="anchor-link" href="#&#54028;&#51060;&#50028;-for-&#47928;&#51060;-iterable-&#52376;&#47532;">&#182;</a></h2>
<pre><code>file은  반복형이면서 반복자로 처리 됨

파이썬 for 문은 iterable, iterator를 받아 연속처리를 하도록 구성

사용자 정의시 연속성 있는 부분을 __iter__로 지정하면 for문에서 연속작업이 가능</code></pre>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[27]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;data.txt&quot;</span><span class="p">,</span><span class="s2">&quot;r&quot;</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">f</span><span class="p">))</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">f</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterable</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">f</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterator</span><span class="p">))</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">f</span> <span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>&lt;class &#39;_io.TextIOWrapper&#39;&gt;
True
True
Hello World 

</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="2.-&#51228;&#45320;&#47112;&#51060;&#53552;">2. &#51228;&#45320;&#47112;&#51060;&#53552;<a class="anchor-link" href="#2.-&#51228;&#45320;&#47112;&#51060;&#53552;">&#182;</a></h1>
<pre><code>제너레이터도 반복형이면서 반복자이다.

함수로 제너레이터를 정의시 수행될 만큼의 계산이 필요한 경우 순환문(for, while 문) 내에 yield를 넣어야 함</code></pre>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="&#51228;&#45320;&#47112;&#51060;&#53552;-&#54632;&#49688;-&#51221;&#51032;">&#51228;&#45320;&#47112;&#51060;&#53552; &#54632;&#49688; &#51221;&#51032;<a class="anchor-link" href="#&#51228;&#45320;&#47112;&#51060;&#53552;-&#54632;&#49688;-&#51221;&#51032;">&#182;</a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[40]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;begin&quot;</span><span class="p">)</span>
    
    <span class="c1"># for 문 내부만 호출시 반복적으로 사용됨 </span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;before yield&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
        <span class="k">yield</span> <span class="n">i</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;after yield&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">)</span> 
    
<span class="n">f</span> <span class="o">=</span> <span class="n">foo</span><span class="p">()</span> 
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">f</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">f</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">f</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">f</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>begin
before yield 0
0
after yield 0
before yield 1
1
after yield 1
before yield 2
2
after yield 2
end
</pre>
</div>
</div>

<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_text output_error">
<pre>
<span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">StopIteration</span>                             Traceback (most recent call last)
<span class="ansi-green-fg">&lt;ipython-input-40-824859ecc794&gt;</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span><span class="ansi-blue-fg">()</span>
<span class="ansi-green-intense-fg ansi-bold">     11</span> print<span class="ansi-yellow-intense-fg ansi-bold">(</span>next<span class="ansi-yellow-intense-fg ansi-bold">(</span>f<span class="ansi-yellow-intense-fg ansi-bold">)</span><span class="ansi-yellow-intense-fg ansi-bold">)</span>
<span class="ansi-green-intense-fg ansi-bold">     12</span> print<span class="ansi-yellow-intense-fg ansi-bold">(</span>next<span class="ansi-yellow-intense-fg ansi-bold">(</span>f<span class="ansi-yellow-intense-fg ansi-bold">)</span><span class="ansi-yellow-intense-fg ansi-bold">)</span>
<span class="ansi-green-fg">---&gt; 13</span><span class="ansi-red-fg"> </span>print<span class="ansi-yellow-intense-fg ansi-bold">(</span>next<span class="ansi-yellow-intense-fg ansi-bold">(</span>f<span class="ansi-yellow-intense-fg ansi-bold">)</span><span class="ansi-yellow-intense-fg ansi-bold">)</span>

<span class="ansi-red-fg">StopIteration</span>: </pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="&#51228;&#45320;&#47112;&#51060;&#53552;-&#52628;&#49345;&#54868;-&#44396;&#51312;">&#51228;&#45320;&#47112;&#51060;&#53552; &#52628;&#49345;&#54868; &#44396;&#51312;<a class="anchor-link" href="#&#51228;&#45320;&#47112;&#51060;&#53552;-&#52628;&#49345;&#54868;-&#44396;&#51312;">&#182;</a></h2>
<pre><code>generator는 iterator를 상속하고, iterator는 iterable을 상속함 </code></pre>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[4]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">collections.abc</span> <span class="k">as</span> <span class="nn">cols</span>

<span class="nb">print</span><span class="p">(</span><span class="n">cols</span><span class="o">.</span><span class="n">Generator</span><span class="o">.</span><span class="vm">__bases__</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterator</span><span class="o">.</span><span class="vm">__bases__</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterable</span><span class="o">.</span><span class="vm">__bases__</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>(&lt;class &#39;collections.abc.Iterator&#39;&gt;,)
(&lt;class &#39;collections.abc.Iterable&#39;&gt;,)
(&lt;class &#39;object&#39;&gt;,)
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[5]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># 제너레이터 : 함수 표현</span>
<span class="k">def</span> <span class="nf">gen</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">:</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">n</span><span class="p">)</span> <span class="p">:</span>
        <span class="k">yield</span> <span class="n">i</span>
    
    
<span class="n">gf</span> <span class="o">=</span> <span class="n">gen</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">gf</span><span class="p">))</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">gf</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterable</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">gf</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterator</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">gf</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Generator</span><span class="p">))</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">gf</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">gf</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">gf</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">gf</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">gf</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">gf</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>&lt;class &#39;generator&#39;&gt;
True
True
True
0
1
2
3
4
</pre>
</div>
</div>

<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_text output_error">
<pre>
<span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">StopIteration</span>                             Traceback (most recent call last)
<span class="ansi-green-fg">&lt;ipython-input-5-fc7c7c87e974&gt;</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span><span class="ansi-blue-fg">()</span>
<span class="ansi-green-intense-fg ansi-bold">     18</span> print<span class="ansi-yellow-intense-fg ansi-bold">(</span>next<span class="ansi-yellow-intense-fg ansi-bold">(</span>gf<span class="ansi-yellow-intense-fg ansi-bold">)</span><span class="ansi-yellow-intense-fg ansi-bold">)</span>
<span class="ansi-green-intense-fg ansi-bold">     19</span> print<span class="ansi-yellow-intense-fg ansi-bold">(</span>next<span class="ansi-yellow-intense-fg ansi-bold">(</span>gf<span class="ansi-yellow-intense-fg ansi-bold">)</span><span class="ansi-yellow-intense-fg ansi-bold">)</span>
<span class="ansi-green-fg">---&gt; 20</span><span class="ansi-red-fg"> </span>print<span class="ansi-yellow-intense-fg ansi-bold">(</span>next<span class="ansi-yellow-intense-fg ansi-bold">(</span>gf<span class="ansi-yellow-intense-fg ansi-bold">)</span><span class="ansi-yellow-intense-fg ansi-bold">)</span>

<span class="ansi-red-fg">StopIteration</span>: </pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="&#51228;&#45320;&#47112;&#51060;&#53552;-&#54364;&#54788;&#49885;-&#51221;&#51032;">&#51228;&#45320;&#47112;&#51060;&#53552; &#54364;&#54788;&#49885; &#51221;&#51032;<a class="anchor-link" href="#&#51228;&#45320;&#47112;&#51060;&#53552;-&#54364;&#54788;&#49885;-&#51221;&#51032;">&#182;</a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[35]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># 제너레이터 표현식</span>

<span class="n">ge</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">ge</span><span class="p">))</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">ge</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterable</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">ge</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterator</span><span class="p">))</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">ge</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">ge</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">ge</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">ge</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">ge</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">ge</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>&lt;class &#39;generator&#39;&gt;
True
True
0
1
2
3
4
</pre>
</div>
</div>

<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_text output_error">
<pre>
<span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">StopIteration</span>                             Traceback (most recent call last)
<span class="ansi-green-fg">&lt;ipython-input-35-23d37f8edcd7&gt;</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span><span class="ansi-blue-fg">()</span>
<span class="ansi-green-intense-fg ansi-bold">     13</span> print<span class="ansi-yellow-intense-fg ansi-bold">(</span>next<span class="ansi-yellow-intense-fg ansi-bold">(</span>ge<span class="ansi-yellow-intense-fg ansi-bold">)</span><span class="ansi-yellow-intense-fg ansi-bold">)</span>
<span class="ansi-green-intense-fg ansi-bold">     14</span> print<span class="ansi-yellow-intense-fg ansi-bold">(</span>next<span class="ansi-yellow-intense-fg ansi-bold">(</span>ge<span class="ansi-yellow-intense-fg ansi-bold">)</span><span class="ansi-yellow-intense-fg ansi-bold">)</span>
<span class="ansi-green-fg">---&gt; 15</span><span class="ansi-red-fg"> </span>print<span class="ansi-yellow-intense-fg ansi-bold">(</span>next<span class="ansi-yellow-intense-fg ansi-bold">(</span>ge<span class="ansi-yellow-intense-fg ansi-bold">)</span><span class="ansi-yellow-intense-fg ansi-bold">)</span>

<span class="ansi-red-fg">StopIteration</span>: </pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="&#51228;&#45320;&#47112;&#51060;&#53552;&#47484;-wrap-&#54644;&#49436;-&#52376;&#47532;&#54616;&#44592;">&#51228;&#45320;&#47112;&#51060;&#53552;&#47484; wrap &#54644;&#49436; &#52376;&#47532;&#54616;&#44592;<a class="anchor-link" href="#&#51228;&#45320;&#47112;&#51060;&#53552;&#47484;-wrap-&#54644;&#49436;-&#52376;&#47532;&#54616;&#44592;">&#182;</a></h3>
<pre><code>직접 제너레이터를 처리하지만  래핑이 필요한 경우 한번 더 제너레이터를 만들어야 한다.

래핑된 제너레이터에서 yield from을 사용하면  기존 제너레이터의 결과를  그대로 처리함</code></pre>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[42]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">reader</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;A generator that fakes a read from a file, socket, etc.&quot;&quot;&quot;</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
        <span class="k">yield</span> <span class="s1">&#39;&lt;&lt; </span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="n">i</span>


<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">reader</span><span class="p">():</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>&lt;&lt; 0
&lt;&lt; 1
&lt;&lt; 2
&lt;&lt; 3
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[41]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">reader</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;A generator that fakes a read from a file, socket, etc.&quot;&quot;&quot;</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
        <span class="k">yield</span> <span class="s1">&#39;&lt;&lt; </span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="n">i</span>

<span class="k">def</span> <span class="nf">reader_wrapper</span><span class="p">(</span><span class="n">g</span><span class="p">):</span>
    <span class="c1"># Manually iterate over data produced by reader</span>
    <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">g</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">v</span>

<span class="n">wrap</span> <span class="o">=</span> <span class="n">reader_wrapper</span><span class="p">(</span><span class="n">reader</span><span class="p">())</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">wrap</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>&lt;&lt; 0
&lt;&lt; 1
&lt;&lt; 2
&lt;&lt; 3
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="yield-from-&#49324;&#50857;&#54616;&#44592;">yield from &#49324;&#50857;&#54616;&#44592;<a class="anchor-link" href="#yield-from-&#49324;&#50857;&#54616;&#44592;">&#182;</a></h3>
<pre><code>yield from은 다른 제너레이터로 부터 직접 처리 결과를 가져올 경우 사용 </code></pre>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[44]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">reader</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;A generator that fakes a read from a file, socket, etc.&quot;&quot;&quot;</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
        <span class="k">yield</span> <span class="s1">&#39;&lt;&lt; </span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="n">i</span>

        
<span class="k">def</span> <span class="nf">reader_wrapper</span><span class="p">(</span><span class="n">g</span><span class="p">):</span>
    <span class="c1"># Manually iterate over data produced by reader</span>
    <span class="k">yield from</span> <span class="n">g</span>

<span class="n">wrap</span> <span class="o">=</span> <span class="n">reader_wrapper</span><span class="p">(</span><span class="n">reader</span><span class="p">())</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">wrap</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>&lt;&lt; 0
&lt;&lt; 1
&lt;&lt; 2
&lt;&lt; 3
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="3.&#49324;&#50857;&#51088;-&#51221;&#51032;-&#53364;&#47000;&#49828;-&#48152;&#48373;&#51088;&#50752;-&#48152;&#48373;&#54805;-&#52376;&#47532;">3.&#49324;&#50857;&#51088; &#51221;&#51032; &#53364;&#47000;&#49828; &#48152;&#48373;&#51088;&#50752; &#48152;&#48373;&#54805; &#52376;&#47532;<a class="anchor-link" href="#3.&#49324;&#50857;&#51088;-&#51221;&#51032;-&#53364;&#47000;&#49828;-&#48152;&#48373;&#51088;&#50752;-&#48152;&#48373;&#54805;-&#52376;&#47532;">&#182;</a></h1>
<pre><code>클래스로 반복자나 반복형을 만들때 중요한 것은 실제 반복이 되는 대상을 __iter__에서 전달해야 함</code></pre>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="&#49324;&#50857;&#51088;-&#51221;&#51032;-&#53364;&#47000;&#49828;&#47196;-iterable-&#52376;&#47532;">&#49324;&#50857;&#51088; &#51221;&#51032; &#53364;&#47000;&#49828;&#47196; iterable &#52376;&#47532;<a class="anchor-link" href="#&#49324;&#50857;&#51088;-&#51221;&#51032;-&#53364;&#47000;&#49828;&#47196;-iterable-&#52376;&#47532;">&#182;</a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[10]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">collections.abc</span> <span class="k">as</span> <span class="nn">cols</span> 
<span class="k">class</span> <span class="nc">SeqIterable</span> <span class="p">:</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">seq</span><span class="p">)</span> <span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_seq</span> <span class="o">=</span> <span class="n">seq</span>
        
    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="p">:</span>
        <span class="k">return</span> <span class="nb">iter</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_seq</span><span class="p">)</span>
    

<span class="n">s</span> <span class="o">=</span> <span class="n">SeqIterable</span><span class="p">(</span><span class="s2">&quot;abcd&quot;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="n">SeqIterable</span><span class="p">,</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterable</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="n">SeqIterable</span><span class="p">,</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterator</span><span class="p">))</span>

<span class="c1">#반복자 만들기 </span>

<span class="n">it</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">it</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterable</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">it</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterator</span><span class="p">))</span>

<span class="c1"># 수동 실행 </span>

<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">it</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">it</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">it</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">it</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">it</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>&lt;__main__.SeqIterable object at 0x0000000005593208&gt;
True
False
True
True
a
b
c
d
</pre>
</div>
</div>

<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_text output_error">
<pre>
<span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">StopIteration</span>                             Traceback (most recent call last)
<span class="ansi-green-fg">&lt;ipython-input-10-00cd8ccf371e&gt;</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span><span class="ansi-blue-fg">()</span>
<span class="ansi-green-intense-fg ansi-bold">     28</span> print<span class="ansi-yellow-intense-fg ansi-bold">(</span>next<span class="ansi-yellow-intense-fg ansi-bold">(</span>it<span class="ansi-yellow-intense-fg ansi-bold">)</span><span class="ansi-yellow-intense-fg ansi-bold">)</span>
<span class="ansi-green-intense-fg ansi-bold">     29</span> print<span class="ansi-yellow-intense-fg ansi-bold">(</span>next<span class="ansi-yellow-intense-fg ansi-bold">(</span>it<span class="ansi-yellow-intense-fg ansi-bold">)</span><span class="ansi-yellow-intense-fg ansi-bold">)</span>
<span class="ansi-green-fg">---&gt; 30</span><span class="ansi-red-fg"> </span>print<span class="ansi-yellow-intense-fg ansi-bold">(</span>next<span class="ansi-yellow-intense-fg ansi-bold">(</span>it<span class="ansi-yellow-intense-fg ansi-bold">)</span><span class="ansi-yellow-intense-fg ansi-bold">)</span>

<span class="ansi-red-fg">StopIteration</span>: </pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="&#49324;&#50857;&#51088;-&#51221;&#51032;-&#53364;&#47000;&#49828;&#47196;-iterator-&#51221;&#51032;">&#49324;&#50857;&#51088; &#51221;&#51032; &#53364;&#47000;&#49828;&#47196; iterator &#51221;&#51032;<a class="anchor-link" href="#&#49324;&#50857;&#51088;-&#51221;&#51032;-&#53364;&#47000;&#49828;&#47196;-iterator-&#51221;&#51032;">&#182;</a></h3>
<pre><code>수동으로 처리 하기 </code></pre>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[19]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">collections.abc</span> <span class="k">as</span> <span class="nn">cols</span> 

<span class="k">class</span> <span class="nc">SeqIterator</span> <span class="p">:</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">seq</span><span class="p">)</span> <span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_seq</span> <span class="o">=</span> <span class="n">seq</span>
        
    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="p">:</span>
        
        <span class="k">return</span> <span class="nb">iter</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_seq</span><span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">__next__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="p">:</span>
        
        <span class="k">return</span> <span class="p">(</span><span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_seq</span><span class="p">)</span>
    
<span class="c1"># 객체를 생성해서 iter로 바꿔야 함</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">SeqIterator</span><span class="p">(</span><span class="s2">&quot;abcd&quot;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>


<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="n">SeqIterator</span><span class="p">,</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterable</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="n">SeqIterator</span><span class="p">,</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterator</span><span class="p">))</span>
<span class="n">it</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

<span class="c1"># 수동 실행 </span>

<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">it</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">it</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">it</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">it</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">it</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>&lt;__main__.SeqIterator object at 0x00000000055A9908&gt;
True
True
a
b
c
d
</pre>
</div>
</div>

<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_text output_error">
<pre>
<span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">StopIteration</span>                             Traceback (most recent call last)
<span class="ansi-green-fg">&lt;ipython-input-19-e371d8bb684c&gt;</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span><span class="ansi-blue-fg">()</span>
<span class="ansi-green-intense-fg ansi-bold">     28</span> print<span class="ansi-yellow-intense-fg ansi-bold">(</span>next<span class="ansi-yellow-intense-fg ansi-bold">(</span>it<span class="ansi-yellow-intense-fg ansi-bold">)</span><span class="ansi-yellow-intense-fg ansi-bold">)</span>
<span class="ansi-green-intense-fg ansi-bold">     29</span> print<span class="ansi-yellow-intense-fg ansi-bold">(</span>next<span class="ansi-yellow-intense-fg ansi-bold">(</span>it<span class="ansi-yellow-intense-fg ansi-bold">)</span><span class="ansi-yellow-intense-fg ansi-bold">)</span>
<span class="ansi-green-fg">---&gt; 30</span><span class="ansi-red-fg"> </span>print<span class="ansi-yellow-intense-fg ansi-bold">(</span>next<span class="ansi-yellow-intense-fg ansi-bold">(</span>it<span class="ansi-yellow-intense-fg ansi-bold">)</span><span class="ansi-yellow-intense-fg ansi-bold">)</span>

<span class="ansi-red-fg">StopIteration</span>: </pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="next-&#52376;&#47532;&#49884;-Exception-&#48156;&#49373;&#51012;-&#50630;&#50528;&#44256;-&#49352;&#47196;&#50868;-&#47196;&#51649;&#51012;-&#52628;&#44032;&#54616;&#45716;-&#48169;&#49885;">next &#52376;&#47532;&#49884; Exception &#48156;&#49373;&#51012; &#50630;&#50528;&#44256; &#49352;&#47196;&#50868; &#47196;&#51649;&#51012; &#52628;&#44032;&#54616;&#45716; &#48169;&#49885;<a class="anchor-link" href="#next-&#52376;&#47532;&#49884;-Exception-&#48156;&#49373;&#51012;-&#50630;&#50528;&#44256;-&#49352;&#47196;&#50868;-&#47196;&#51649;&#51012;-&#52628;&#44032;&#54616;&#45716;-&#48169;&#49885;">&#182;</a></h3>
<pre><code>next(iterable, None)</code></pre>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[48]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">help</span><span class="p">(</span><span class="nb">next</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>Help on built-in function next in module builtins:

next(...)
    next(iterator[, default])
    
    Return the next item from the iterator. If default is given and the iterator
    is exhausted, it is returned instead of raising StopIteration.

</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[49]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">collections.abc</span> <span class="k">as</span> <span class="nn">cols</span> 

<span class="k">class</span> <span class="nc">SeqIterator</span> <span class="p">:</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">seq</span><span class="p">)</span> <span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_seq</span> <span class="o">=</span> <span class="n">seq</span>
        
    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="p">:</span>
        
        <span class="k">return</span> <span class="nb">iter</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_seq</span><span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">__next__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="p">:</span>
        
        <span class="k">return</span> <span class="p">(</span><span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_seq</span><span class="p">)</span>
    
<span class="c1"># 객체를 생성해서 iter로 바꿔야 함</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">SeqIterator</span><span class="p">(</span><span class="s2">&quot;abcd&quot;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>


<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="n">SeqIterator</span><span class="p">,</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterable</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="n">SeqIterator</span><span class="p">,</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterator</span><span class="p">))</span>
<span class="n">it</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

<span class="c1"># next 함수에 default 값을 넣어서 처리하고 추가 로직을 처리 </span>

<span class="k">while</span> <span class="kc">True</span> <span class="p">:</span>
    <span class="n">a</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">it</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="kc">None</span> <span class="p">:</span>
        <span class="k">break</span>
 
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>&lt;__main__.SeqIterator object at 0x00000000055AB518&gt;
True
True
a
b
c
d
None
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="4.-&#53076;&#47336;&#54004;-&#52376;&#47532;">4. &#53076;&#47336;&#54004; &#52376;&#47532;<a class="anchor-link" href="#4.-&#53076;&#47336;&#54004;-&#52376;&#47532;">&#182;</a></h1>
<pre><code>coroutine.send (value)
      코루틴의 실행을 시작하거나 다시 시작합니다.
      value가 None이면 시작, None이 아니면이 값을 처리 


coroutine.throw (type [, value [, traceback]])
     코루틴에서 지정된 예외를 발생시킵니다. 이 메소드는 코 루틴을 일시 중단시키는 반복자의 throw () 메소드에 위임합니다 

coroutine.close ()
     코루틴 자체를 종료합니다.</code></pre>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="&#53076;&#47336;&#54004;-&#51228;&#45320;&#47112;&#51060;&#53552;&#47484;-&#49373;&#49457;&#54616;&#44256;-&#53364;&#47196;&#51592;-&#54616;&#44592;">&#53076;&#47336;&#54004; &#51228;&#45320;&#47112;&#51060;&#53552;&#47484; &#49373;&#49457;&#54616;&#44256; &#53364;&#47196;&#51592; &#54616;&#44592;<a class="anchor-link" href="#&#53076;&#47336;&#54004;-&#51228;&#45320;&#47112;&#51060;&#53552;&#47484;-&#49373;&#49457;&#54616;&#44256;-&#53364;&#47196;&#51592;-&#54616;&#44592;">&#182;</a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[9]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">collections.abc</span> <span class="k">as</span> <span class="nn">cols</span>
<span class="k">def</span> <span class="nf">writer</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;A coroutine that writes data *sent* to it to fd, socket, etc.&quot;&quot;&quot;</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="n">w</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span><span class="p">)</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;&gt;&gt; &#39;</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span>
        
<span class="n">w</span> <span class="o">=</span> <span class="n">writer</span><span class="p">()</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">w</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">w</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterable</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">w</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterator</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">w</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Generator</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">w</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Coroutine</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>&lt;class &#39;generator&#39;&gt;
True
True
True
False
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[57]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">w</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="kc">None</span><span class="p">)</span>  <span class="c1"># &quot;prime&quot; the coroutine</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
    <span class="n">w</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="n">w</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>

<span class="c1"># close 후 다시 실행하면 에러 처리 됨</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
    <span class="n">w</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>&gt;&gt;  0
&gt;&gt;  1
&gt;&gt;  2
&gt;&gt;  3
</pre>
</div>
</div>

<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_text output_error">
<pre>
<span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">StopIteration</span>                             Traceback (most recent call last)
<span class="ansi-green-fg">&lt;ipython-input-57-4d66a5270a8b&gt;</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span><span class="ansi-blue-fg">()</span>
<span class="ansi-green-intense-fg ansi-bold">      7</span> <span class="ansi-red-intense-fg ansi-bold"># close 후 다시 실행하면 에러 처리 됨</span>
<span class="ansi-green-intense-fg ansi-bold">      8</span> <span class="ansi-green-intense-fg ansi-bold">for</span> i <span class="ansi-green-intense-fg ansi-bold">in</span> range<span class="ansi-yellow-intense-fg ansi-bold">(</span><span class="ansi-cyan-intense-fg ansi-bold">4</span><span class="ansi-yellow-intense-fg ansi-bold">)</span><span class="ansi-yellow-intense-fg ansi-bold">:</span>
<span class="ansi-green-fg">----&gt; 9</span><span class="ansi-red-fg">     </span>w<span class="ansi-yellow-intense-fg ansi-bold">.</span>send<span class="ansi-yellow-intense-fg ansi-bold">(</span>i<span class="ansi-yellow-intense-fg ansi-bold">)</span>

<span class="ansi-red-fg">StopIteration</span>: </pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="&#53076;&#47336;&#54004;-&#51228;&#45320;&#47112;&#51060;&#53552;&#51060;-&#51116;&#49324;&#50857;">&#53076;&#47336;&#54004; &#51228;&#45320;&#47112;&#51060;&#53552;&#51060; &#51116;&#49324;&#50857;<a class="anchor-link" href="#&#53076;&#47336;&#54004;-&#51228;&#45320;&#47112;&#51060;&#53552;&#51060;-&#51116;&#49324;&#50857;">&#182;</a></h3>
<pre><code>한번 사용하면 재사용이 안되지만 코루틴으로 처리시 close 전까지는 재사용 가능</code></pre>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[60]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">writer</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;A coroutine that writes data *sent* to it to fd, socket, etc.&quot;&quot;&quot;</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="n">w</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span><span class="p">)</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;&gt;&gt; &#39;</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span>
        
<span class="n">w</span> <span class="o">=</span> <span class="n">writer</span><span class="p">()</span>

<span class="n">w</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="kc">None</span><span class="p">)</span>  <span class="c1"># &quot;prime&quot; the coroutine</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
    <span class="n">w</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>


<span class="c1"># 다시 초기화해서 사용 가능</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
    <span class="n">w</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>&gt;&gt;  0
&gt;&gt;  1
&gt;&gt;  2
&gt;&gt;  3
&gt;&gt;  0
&gt;&gt;  1
&gt;&gt;  2
&gt;&gt;  3
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="5.-&#45236;&#51109;-&#45936;&#51060;&#53552;-&#53440;&#51077;-&#48143;-&#54632;&#49688;-&#44208;&#44284;">5. &#45236;&#51109; &#45936;&#51060;&#53552; &#53440;&#51077; &#48143; &#54632;&#49688; &#44208;&#44284;<a class="anchor-link" href="#5.-&#45236;&#51109;-&#45936;&#51060;&#53552;-&#53440;&#51077;-&#48143;-&#54632;&#49688;-&#44208;&#44284;">&#182;</a></h1>
<pre><code>내부 keys, values, items 메소드 결과 에 대한 처리 </code></pre>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="range--&#54632;&#49688;">range  &#54632;&#49688;<a class="anchor-link" href="#range--&#54632;&#49688;">&#182;</a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[11]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">range</span><span class="p">,</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterable</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">range</span><span class="p">,</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterator</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>True
False
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="map&#54632;&#49688;">map&#54632;&#49688;<a class="anchor-link" href="#map&#54632;&#49688;">&#182;</a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[15]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">ma</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">pow</span><span class="p">,[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">ma</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">ma</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterable</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">ma</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterator</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>&lt;class &#39;map&#39;&gt;
True
True
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="filter-&#54632;&#49688;">filter &#54632;&#49688;<a class="anchor-link" href="#filter-&#54632;&#49688;">&#182;</a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[17]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">ma</span> <span class="o">=</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="n">x</span><span class="o">%</span><span class="k">2</span> == 0,[1,2,3,4])

<span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">ma</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">ma</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterable</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">ma</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterator</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>&lt;class &#39;filter&#39;&gt;
True
True
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="dict-:-keys,-values,-items-&#47700;&#49548;&#46300;-&#44208;&#44284;-&#50640;-&#45824;&#54620;-&#52376;&#47532;">dict : keys, values, items &#47700;&#49548;&#46300; &#44208;&#44284; &#50640; &#45824;&#54620; &#52376;&#47532;<a class="anchor-link" href="#dict-:-keys,-values,-items-&#47700;&#49548;&#46300;-&#44208;&#44284;-&#50640;-&#45824;&#54620;-&#52376;&#47532;">&#182;</a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[63]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">d</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">b</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">key</span> <span class="o">=</span> <span class="n">d</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">key</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterable</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">key</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterator</span><span class="p">))</span>


<span class="n">key_it</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">key_it</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">key_it</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">key_it</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>&lt;class &#39;dict_keys&#39;&gt;
True
False
False
a
b
</pre>
</div>
</div>

<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_text output_error">
<pre>
<span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">StopIteration</span>                             Traceback (most recent call last)
<span class="ansi-green-fg">&lt;ipython-input-63-056841a073b8&gt;</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span><span class="ansi-blue-fg">()</span>
<span class="ansi-green-intense-fg ansi-bold">     11</span> print<span class="ansi-yellow-intense-fg ansi-bold">(</span>next<span class="ansi-yellow-intense-fg ansi-bold">(</span>key_it<span class="ansi-yellow-intense-fg ansi-bold">)</span><span class="ansi-yellow-intense-fg ansi-bold">)</span>
<span class="ansi-green-intense-fg ansi-bold">     12</span> print<span class="ansi-yellow-intense-fg ansi-bold">(</span>next<span class="ansi-yellow-intense-fg ansi-bold">(</span>key_it<span class="ansi-yellow-intense-fg ansi-bold">)</span><span class="ansi-yellow-intense-fg ansi-bold">)</span>
<span class="ansi-green-fg">---&gt; 13</span><span class="ansi-red-fg"> </span>print<span class="ansi-yellow-intense-fg ansi-bold">(</span>next<span class="ansi-yellow-intense-fg ansi-bold">(</span>key_it<span class="ansi-yellow-intense-fg ansi-bold">)</span><span class="ansi-yellow-intense-fg ansi-bold">)</span>

<span class="ansi-red-fg">StopIteration</span>: </pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[64]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">d</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">b</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">items</span> <span class="o">=</span> <span class="n">d</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">items</span><span class="p">))</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">items</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterable</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">items</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterator</span><span class="p">))</span>


<span class="n">items_it</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">items_it</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">items_it</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">items_it</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>&lt;class &#39;dict_items&#39;&gt;
True
False
(&#39;a&#39;, 1)
(&#39;b&#39;, 2)
</pre>
</div>
</div>

<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_text output_error">
<pre>
<span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">StopIteration</span>                             Traceback (most recent call last)
<span class="ansi-green-fg">&lt;ipython-input-64-4a8ff99669c9&gt;</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span><span class="ansi-blue-fg">()</span>
<span class="ansi-green-intense-fg ansi-bold">     10</span> print<span class="ansi-yellow-intense-fg ansi-bold">(</span>next<span class="ansi-yellow-intense-fg ansi-bold">(</span>items_it<span class="ansi-yellow-intense-fg ansi-bold">)</span><span class="ansi-yellow-intense-fg ansi-bold">)</span>
<span class="ansi-green-intense-fg ansi-bold">     11</span> print<span class="ansi-yellow-intense-fg ansi-bold">(</span>next<span class="ansi-yellow-intense-fg ansi-bold">(</span>items_it<span class="ansi-yellow-intense-fg ansi-bold">)</span><span class="ansi-yellow-intense-fg ansi-bold">)</span>
<span class="ansi-green-fg">---&gt; 12</span><span class="ansi-red-fg"> </span>print<span class="ansi-yellow-intense-fg ansi-bold">(</span>next<span class="ansi-yellow-intense-fg ansi-bold">(</span>items_it<span class="ansi-yellow-intense-fg ansi-bold">)</span><span class="ansi-yellow-intense-fg ansi-bold">)</span>

<span class="ansi-red-fg">StopIteration</span>: </pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="6.-itertools-&#47784;&#46280;-&#51060;&#50857;&#54644;&#49436;-iterable-&#52376;&#47532;">6. itertools &#47784;&#46280; &#51060;&#50857;&#54644;&#49436; iterable &#52376;&#47532;<a class="anchor-link" href="#6.-itertools-&#47784;&#46280;-&#51060;&#50857;&#54644;&#49436;-iterable-&#52376;&#47532;">&#182;</a></h1>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="&#49692;&#50676;&#44284;-&#51312;&#54633;&#51004;&#47196;-&#52376;&#47532;-&#54616;&#44592;">&#49692;&#50676;&#44284; &#51312;&#54633;&#51004;&#47196; &#52376;&#47532; &#54616;&#44592;<a class="anchor-link" href="#&#49692;&#50676;&#44284;-&#51312;&#54633;&#51004;&#47196;-&#52376;&#47532;-&#54616;&#44592;">&#182;</a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[72]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># 원소에 대한 순열 처리 </span>
<span class="kn">import</span> <span class="nn">itertools</span>  <span class="k">as</span> <span class="nn">its</span>

<span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;c&#39;</span><span class="p">]</span>

<span class="c1"># n! = 6</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">its</span><span class="o">.</span><span class="n">permutations</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">p</span> <span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

    
<span class="c1"># n! / (n-r)! = 6</span>
<span class="n">p2</span> <span class="o">=</span> <span class="n">its</span><span class="o">.</span><span class="n">permutations</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>    
<span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">p2</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>&lt;itertools.permutations object at 0x00000000055BC0F8&gt;
(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)
(&#39;a&#39;, &#39;c&#39;, &#39;b&#39;)
(&#39;b&#39;, &#39;a&#39;, &#39;c&#39;)
(&#39;b&#39;, &#39;c&#39;, &#39;a&#39;)
(&#39;c&#39;, &#39;a&#39;, &#39;b&#39;)
(&#39;c&#39;, &#39;b&#39;, &#39;a&#39;)
[(&#39;a&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;c&#39;), (&#39;b&#39;, &#39;a&#39;), (&#39;b&#39;, &#39;c&#39;), (&#39;c&#39;, &#39;a&#39;), (&#39;c&#39;, &#39;b&#39;)]
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[74]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># 원소에 대한 조합 처리 </span>
<span class="kn">import</span> <span class="nn">itertools</span>  <span class="k">as</span> <span class="nn">its</span>

<span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;c&#39;</span><span class="p">]</span>

<span class="c1"># n! / r!(n-r)! = 3</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">its</span><span class="o">.</span><span class="n">combinations</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">p</span> <span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>


<span class="n">p2</span> <span class="o">=</span> <span class="n">its</span><span class="o">.</span><span class="n">combinations</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>    
<span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">p2</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>&lt;itertools.combinations object at 0x00000000055DB958&gt;
(&#39;a&#39;, &#39;b&#39;)
(&#39;a&#39;, &#39;c&#39;)
(&#39;b&#39;, &#39;c&#39;)
[(&#39;a&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;c&#39;), (&#39;b&#39;, &#39;c&#39;)]
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="&#49692;&#49436;&#49933;-&#52376;&#47532;-&#54616;&#44592;">&#49692;&#49436;&#49933; &#52376;&#47532; &#54616;&#44592;<a class="anchor-link" href="#&#49692;&#49436;&#49933;-&#52376;&#47532;-&#54616;&#44592;">&#182;</a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h4 id="zip-&#45236;&#51109;&#54632;&#49688;&#47196;-&#52376;&#47532;&#54616;&#44592;">zip &#45236;&#51109;&#54632;&#49688;&#47196; &#52376;&#47532;&#54616;&#44592;<a class="anchor-link" href="#zip-&#45236;&#51109;&#54632;&#49688;&#47196;-&#52376;&#47532;&#54616;&#44592;">&#182;</a></h4>
<pre><code> 원소가 다른 것을 순서쌍으로 만들때 작은 쪽 기준으로 처리됨 </code></pre>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[18]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">collections.abc</span> <span class="k">as</span> <span class="nn">cols</span>

<span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;c&#39;</span><span class="p">]</span>

<span class="n">az</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="n">l</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">az</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">az</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Generator</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">az</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterable</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">az</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterator</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">az</span><span class="p">))</span>
<span class="c1"># 한번 사용한 후에  없어짐</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">az</span><span class="p">))</span>

<span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;c&#39;</span><span class="p">]</span>
<span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;c&#39;</span><span class="p">,</span><span class="s1">&#39;d&#39;</span><span class="p">,</span><span class="s1">&#39;e&#39;</span><span class="p">]</span>
<span class="n">az</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="n">s</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">az</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>&lt;zip object at 0x00000000050CF488&gt;
False
True
True
[(&#39;a&#39;, &#39;a&#39;), (&#39;b&#39;, &#39;b&#39;), (&#39;c&#39;, &#39;c&#39;)]
[]
[(&#39;a&#39;, &#39;a&#39;), (&#39;b&#39;, &#39;b&#39;), (&#39;c&#39;, &#39;c&#39;)]
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h4 id="&#44050;&#46308;&#50640;-&#45824;&#54620;-&#49692;&#49436;&#49933;&#51012;-&#44596;-&#44275;&#51012;-&#44592;&#51456;&#51004;&#47196;-&#52376;&#47532;-:-itertools.zip_longest">&#44050;&#46308;&#50640; &#45824;&#54620; &#49692;&#49436;&#49933;&#51012; &#44596; &#44275;&#51012; &#44592;&#51456;&#51004;&#47196; &#52376;&#47532; : itertools.zip_longest<a class="anchor-link" href="#&#44050;&#46308;&#50640;-&#45824;&#54620;-&#49692;&#49436;&#49933;&#51012;-&#44596;-&#44275;&#51012;-&#44592;&#51456;&#51004;&#47196;-&#52376;&#47532;-:-itertools.zip_longest">&#182;</a></h4>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[16]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">itertools</span>

<span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;c&#39;</span><span class="p">]</span>
<span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;c&#39;</span><span class="p">,</span><span class="s1">&#39;d&#39;</span><span class="p">,</span><span class="s1">&#39;e&#39;</span><span class="p">]</span>
<span class="n">az</span> <span class="o">=</span> <span class="n">itertools</span><span class="o">.</span><span class="n">zip_longest</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="n">s</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">az</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Generator</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">az</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterable</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">az</span><span class="p">),</span><span class="n">cols</span><span class="o">.</span><span class="n">Iterator</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">az</span><span class="p">))</span>
<span class="c1"># 한번 사용한 후에  없어짐</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">az</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>False
True
True
[(&#39;a&#39;, &#39;a&#39;), (&#39;b&#39;, &#39;b&#39;), (&#39;c&#39;, &#39;c&#39;), (None, &#39;d&#39;), (None, &#39;e&#39;)]
[]
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h4 id="itertools.product-&#51060;&#50857;&#54616;&#44592;">itertools.product &#51060;&#50857;&#54616;&#44592;<a class="anchor-link" href="#itertools.product-&#51060;&#50857;&#54616;&#44592;">&#182;</a></h4>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[77]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># 원소에 대한 순서쌍 처리 </span>
<span class="kn">import</span> <span class="nn">itertools</span>  <span class="k">as</span> <span class="nn">its</span>

<span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;c&#39;</span><span class="p">]</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">its</span><span class="o">.</span><span class="n">product</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="n">l</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">p</span> <span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="n">p3</span> <span class="o">=</span> <span class="n">its</span><span class="o">.</span><span class="n">product</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="n">l</span><span class="p">,</span><span class="n">l</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">p3</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>&lt;itertools.product object at 0x00000000055E8900&gt;
(&#39;a&#39;, &#39;a&#39;)
(&#39;a&#39;, &#39;b&#39;)
(&#39;a&#39;, &#39;c&#39;)
(&#39;b&#39;, &#39;a&#39;)
(&#39;b&#39;, &#39;b&#39;)
(&#39;b&#39;, &#39;c&#39;)
(&#39;c&#39;, &#39;a&#39;)
(&#39;c&#39;, &#39;b&#39;)
(&#39;c&#39;, &#39;c&#39;)
[(&#39;a&#39;, &#39;a&#39;, &#39;a&#39;), (&#39;a&#39;, &#39;a&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;a&#39;, &#39;c&#39;), (&#39;a&#39;, &#39;b&#39;, &#39;a&#39;), (&#39;a&#39;, &#39;b&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;), (&#39;a&#39;, &#39;c&#39;, &#39;a&#39;), (&#39;a&#39;, &#39;c&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;c&#39;, &#39;c&#39;), (&#39;b&#39;, &#39;a&#39;, &#39;a&#39;), (&#39;b&#39;, &#39;a&#39;, &#39;b&#39;), (&#39;b&#39;, &#39;a&#39;, &#39;c&#39;), (&#39;b&#39;, &#39;b&#39;, &#39;a&#39;), (&#39;b&#39;, &#39;b&#39;, &#39;b&#39;), (&#39;b&#39;, &#39;b&#39;, &#39;c&#39;), (&#39;b&#39;, &#39;c&#39;, &#39;a&#39;), (&#39;b&#39;, &#39;c&#39;, &#39;b&#39;), (&#39;b&#39;, &#39;c&#39;, &#39;c&#39;), (&#39;c&#39;, &#39;a&#39;, &#39;a&#39;), (&#39;c&#39;, &#39;a&#39;, &#39;b&#39;), (&#39;c&#39;, &#39;a&#39;, &#39;c&#39;), (&#39;c&#39;, &#39;b&#39;, &#39;a&#39;), (&#39;c&#39;, &#39;b&#39;, &#39;b&#39;), (&#39;c&#39;, &#39;b&#39;, &#39;c&#39;), (&#39;c&#39;, &#39;c&#39;, &#39;a&#39;), (&#39;c&#39;, &#39;c&#39;, &#39;b&#39;), (&#39;c&#39;, &#39;c&#39;, &#39;c&#39;)]
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h4 id="itertools.chain">itertools.chain<a class="anchor-link" href="#itertools.chain">&#182;</a></h4>
<pre><code> 연속되는 객체를 연결해서 처리</code></pre>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[12]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># 원소에 대한 연결을 하는 chian 처리 </span>
<span class="kn">import</span> <span class="nn">itertools</span>  <span class="k">as</span> <span class="nn">its</span>

<span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;c&#39;</span><span class="p">]</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">its</span><span class="o">.</span><span class="n">chain</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="n">l</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">p</span><span class="p">))</span>

<span class="c1"># 제너레이터 이므로 한번 사용하면 다시 생성이 필요</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">its</span><span class="o">.</span><span class="n">chain</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="n">l</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">p</span> <span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>&lt;itertools.chain object at 0x000000000515D4E0&gt;
[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;]
a
b
c
a
b
c
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h4 id="itertools.Repeat">itertools.Repeat<a class="anchor-link" href="#itertools.Repeat">&#182;</a></h4>
<pre><code>리스트 * 연산가 다른 점은 리스트를 하나의 원소로 보고 반복을 나타냄</code></pre>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[9]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># 원소에 대한 연결을 하는 repeat처리 </span>
<span class="kn">import</span> <span class="nn">itertools</span>  <span class="k">as</span> <span class="nn">its</span>

<span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;c&#39;</span><span class="p">]</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">its</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">p</span> <span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    
<span class="nb">print</span><span class="p">(</span><span class="n">l</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>repeat([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], 2)
[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]
[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]
[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;]
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h4 id="iter.tools.cycle">iter.tools.cycle<a class="anchor-link" href="#iter.tools.cycle">&#182;</a></h4>
<pre><code> 무한 처리가 되므로 사용할 만큼 처리를 해야 함 </code></pre>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[8]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># 원소에 대한 연결을 하는 cycle처리 </span>

<span class="kn">import</span> <span class="nn">itertools</span>  <span class="k">as</span> <span class="nn">its</span>

<span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;c&#39;</span><span class="p">]</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">its</span><span class="o">.</span><span class="n">cycle</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>

<span class="c1"># 무한 순환이 가능하므로 제약을 줘야 함</span>
<span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">p</span> <span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">count</span> <span class="o">&gt;=</span><span class="mi">3</span>  <span class="p">:</span>
        <span class="k">break</span>
    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>&lt;itertools.cycle object at 0x0000000005165808&gt;
a
b
c
a
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="itertools.count">itertools.count<a class="anchor-link" href="#itertools.count">&#182;</a></h3><p>무한 처리가 되므로 사용할 만큼 처리를 해야 함</p>
<p>class count(builtins.object)
  |  count(start=0, step=1) --&gt; count object
  |</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[1]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">itertools</span>  <span class="k">as</span> <span class="nn">its</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">its</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> 

<span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">a</span> <span class="p">:</span>
    <span class="k">if</span> <span class="n">cnt</span> <span class="o">&gt;</span> <span class="mi">5</span> <span class="p">:</span>
        <span class="k">break</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>count(3)
3
4
5
6
7
8
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h4 id="&#47924;&#54620;-&#47336;&#54609;&#46104;&#45716;-&#44163;&#51012;-&#51228;&#50612;&#54616;&#44592;--:-takewhile">&#47924;&#54620; &#47336;&#54609;&#46104;&#45716; &#44163;&#51012; &#51228;&#50612;&#54616;&#44592;  : takewhile<a class="anchor-link" href="#&#47924;&#54620;-&#47336;&#54609;&#46104;&#45716;-&#44163;&#51012;-&#51228;&#50612;&#54616;&#44592;--:-takewhile">&#182;</a></h4>
<pre><code> itertools.count는 무한 숫자를 반복하지만 takewhile 내의 함수가 거짓일 경우 처리를 중단한다.</code></pre>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[2]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">itertools</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">itertools</span><span class="o">.</span><span class="n">takewhile</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">,</span> <span class="n">itertools</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.5</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>[0, 0.5, 1.0, 1.5, 2.0, 2.5]
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="itertools.islice">itertools.islice<a class="anchor-link" href="#itertools.islice">&#182;</a></h3>
<pre><code>iterable 데이터에 대한 slicing 처리 </code></pre>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[3]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">itertools</span>  <span class="k">as</span> <span class="nn">its</span>

<span class="nb">print</span><span class="p">(</span><span class="n">its</span><span class="o">.</span><span class="n">islice</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="mi">8</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">its</span><span class="o">.</span><span class="n">islice</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">its</span><span class="o">.</span><span class="n">islice</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">its</span><span class="o">.</span><span class="n">islice</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">a</span> <span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>&lt;itertools.islice object at 0x0000000004EA58B8&gt;
&lt;itertools.islice object at 0x0000000004EA5D68&gt;
&lt;itertools.islice object at 0x0000000004EA5DB8&gt;
2
4
6
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="itertools.tee">itertools.tee<a class="anchor-link" href="#itertools.tee">&#182;</a></h3>
<pre><code>인자 갯수만큼 복제하기, 기본 값은 2 </code></pre>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[5]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">itertools</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">itertools</span><span class="o">.</span><span class="n">tee</span><span class="p">(</span> <span class="n">itertools</span><span class="o">.</span><span class="n">count</span><span class="p">()</span> <span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">itertools</span><span class="o">.</span><span class="n">tee</span><span class="p">(</span> <span class="n">itertools</span><span class="o">.</span><span class="n">count</span><span class="p">(),</span><span class="mi">3</span> <span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">
<div class="prompt"></div>

<div class="output_subarea output_stream output_stdout output_text">
<pre>(&lt;itertools._tee object at 0x0000000004EBD308&gt;, &lt;itertools._tee object at 0x0000000004EBD348&gt;)
(&lt;itertools._tee object at 0x0000000004EBD3C8&gt;, &lt;itertools._tee object at 0x0000000004EBD408&gt;, &lt;itertools._tee object at 0x0000000004EBD448&gt;)
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[&nbsp;]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span> 
</pre></div>

</div>
</div>
</div>

</div>
 

